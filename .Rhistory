rbind(Performance[1,]/sum(Performance[1,]),
Performance[2,]/sum(Performance[2,]))
data
sqrt((((data[1,2]-data[2,1])^2)/(data[1,2]+data[2,1]))/sum(data))
sqrt((((data[1,2]-data[2,1])^2)/(data[1,2]+data[2,1]))/sum(data))
sqrt( (((data[1,2]-data[2,1])^2)/(data[1,2]+data[2,1]) )/sum(data) )
sqrt(mcnemar.test(data)$statistic/sum(data))
q_mcnemar <- ((data[1,2]-data[2,1])^2) / (data[1,2]+data[2,1])
sqrt( q_mcnemar / sum(data) )
q_mcnemar <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
sqrt( q_mcnemar / sum(data) )
sqrt(mcnemar.test(data)$statistic/sum(data))
library(DescTools)
Phi(data)
ContCoef(data)
CramerV(data)
TschuprowT(data)
q_mcnemar <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
sqrt( q_mcnemar / sum(data) )
sqrt(mcnemar.test(data)$statistic/sum(data))
sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data))
q_mcnemar <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
sqrt( q_mcnemar / sum(data) )
sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data))
q_mcnemar <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
sqrt( q_mcnemar / sum(data) )
psych::phi(data,digits=4, correct=TRUE)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
# ou
library(DescTools)
DescTools::Phi(data, correct=TRUE)
chisq.test(data,correct=F)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=T)$statistic/sum(data))) #(sem correção de continuidade)
DescTools::CramerV(data, correct=TRUE)
DescTools::CramerV(data, correct=TRUE)
DescTools::Phi(data, correct=FALSE)
DescTools::Phi(data, correct=TRUE)
DescTools::Phi(data)
DescTools::CramerV(data)
chisq.test(data,correct=F)
as.numeric(sqrt(chisq.test(data,correct=T)$statistic/sum(data))) #(sem correção de continuidade)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
# ou
library(DescTools)
DescTools::CramerV(data)
chisq.test(data,correct=F)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
phi <- sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
phi <- as.numeric(sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
mcnemar.test(data, correct = TRUE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
mcnemar.test(data, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
mcnemar.test(data, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
mcnemar.test(data, correct = TRUE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data)
# ou
# library(DescTools)
# DescTools::CramerV(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=6)
# ou
# library(DescTools)
# DescTools::CramerV(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=6)
# ou
library(DescTools)
DescTools::CramerV(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=7)
# ou
library(DescTools)
DescTools::CramerV(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=7)
# ou
# library(DescTools)
# DescTools::CramerV(data)
library(rcompanion)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
rcompanion::cohenW(data)
chisq.test(data,correct=F)
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=T) %>% str()
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=F)$expected
chisq.test(data,correct=F)
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=F)$expected
chisq.test(data,correct=T)
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=F)$expected
chisq.test(data,correct=T)
chisq.test(data,correct=F)
chisq.test(data,correct=F)
chisq.test(data,correct=F) %>% str()
chisq.test(data,correct=F)$expected
chisq.test(data,correct=F)$expected
data
apply(data, 2, sum)
chisq.test(data,correct=F)$expected
apply(data, 2, sum)
chisq.test(data,correct=F)$expected
apply(data, 2, sum)/length(data)
apply(data, 2, sum)/length(data)
chisq.test(data,correct=F)$expected
apply(data, 2, sum)/nrow(data)
chisq.test(data,correct=F)$expected
apply(data, 2, sum)/nrow(data) # Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
chisq.test(data,correct=F)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=7)
# ou
# library(DescTools)
# DescTools::CramerV(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
apply(data, 2, sum)/nrow(data) # Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
chisq.test(data,correct=F)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
apply(data, 2, sum)/nrow(data) # Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
chisq.test(data,correct=F)
library(psych)
psych::phi(data,digits=7)
# ou
# library(DescTools)
# DescTools::CramerV(data)
chisq.test(data,correct=F) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
chisq.test(data,correct=F) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
apply(data, 2, sum)/nrow(data) # Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
apply(data, 2, sum)/nrow(data) # Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
chisq.test(data,correct=T)$expected
chisq.test(data,correct=F) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
library(psych)
psych::phi(data,digits=7)
# ou
# library(DescTools)
# DescTools::CramerV(data)
mcnemar.test(data, correct = TRUE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
Performance <- matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
(data[1,2]-data[2,1])
(data[1,2]+data[2,1])
(data[1,2]+data[2,1]) < 25
Performance[1,2]+Performance[2,1]
(Performance[1,2]+Performance[2,1]) < 25 # Utilizar a correção de continuidade de Yates
Performance[1,2]+Performance[2,1]
(Performance[1,2]+Performance[2,1])/2
(Performance[1,2]+Performance[2,1])/2 < 5
(Performance[1,2]+Performance[2,1])/2 < 5 #
Performance <- matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
(Performance[1,2]+Performance[2,1])/2 < 5 # Não precisa utilizar o teste binomial
(Performance[1,2]+Performance[2,1]) < 25 # Não precisa utilizar a correção de continuidade de Yates
mcnemar.test(Performance, correct = TRUE)
mcnemar.test(Performance, correct = FALSE)
mcnemar.test(Performance, correct = FALSE)
mcnemar.test(Performance, correct = TRUE)
# sem correção de continuidade de Yates
mcnemar.test(data, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data)))
phi
# com correção de continuidade de Yates
mcnemar.test(data, correct = TRUE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = TRUE)$statistic/sum(data)))
phi
# mcnemar.test_statistic <- ((abs(data[1,2]-data[2,1]) - 1) ^2) / (data[1,2]+data[2,1])
# sqrt( mcnemar.test_statistic / sum(data) )
# sem correção de continuidade de Yates
mcnemar.test(data, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data)))
phi
ei <- apply(data, 2, sum)/nrow(data)
rbind(ei,ei)
e1 <- apply(data, 2, sum)/nrow(data)
e2 <- apply(data, 2, sum)/nrow(data)
rbind(e1,e2)
# Como a frequência esperada menor que $5\left(E_{i j}<5\right)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected
chisq.test(data,correct=T)$expected
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade)
library(psych)
psych::phi(data,digits=7)
# ou
library(DescTools)
DescTools::CramerV(data)
mcnemar.test(Performance, correct = FALSE)
mcnemar.test(Performance, correct = TRUE)
# sem correção de continuidade de Yates
mcnemar.test(data, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(data, correct = FALSE)$statistic/sum(data)))
phi
# sem correção de continuidade de Yates
mcnemar.test(Performance, correct = FALSE)
phi <- as.numeric(sqrt(mcnemar.test(Performance, correct = FALSE)$statistic/sum(Performance)))
phi
?rcompanion::cramerV
data(Anderson)
ANderson
Anderson
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
cohen.d(x0,y0,paired = TRUE)
effsize::cohen.d(x0,y0,paired = TRUE)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
effsize::cohen.d(x0,y0,paired = TRUE,hedges.correction=FALSE)
effsize::cohen.d(x0,y0,paired = TRUE,hedges.correction=TRUE)
effsize::cohen.d(x0,y0,paired = TRUE)
library(effsize)
# Exemplo para d de cohen grupos independentes:
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d=(c(grupoa,grupob))
effsize::cohen.d(grupoa,grupob)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
install.packages("lsr")
pre  <- c(100, 122, 97, 25, 274) # a pre-treatment measure for 5 cases
post <- c(104, 125, 99, 29, 277) # the post-treatment measure for the same 5 cases
lsr::cohensD(pre, post, method = "paired") # ... explicitly indicate that it's paired, or else
lsr::cohensD(x0, y0, method = "paired")
lsr::cohensD(y0,x0, method = "paired")
effsize::cohen.d(pre,post,paired = TRUE)
effsize::cohen.d(post,pre,paired = TRUE)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T, var.equal=TRUE)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=TRUE)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=FALSE)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=FALSE)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=FALSE)$statistic
cohen <- t/sqrt(n)
cohen
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=FALSE)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=TRUE)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T,var.equal=FALSE)$statistic
cohen <- t/sqrt(n)
cohen
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
effsize::cohen.d
methods(effsize::cohen.d)
cohen.d.default
effsize::cohen.d.default
effsize::cohen.d.default*
cohen.d.ci
ohen.d.by
cohen.d.by
cohen.d.formula
cohen.d.default
effsize::cohen.d.default
effsize::cohen.d.default*
methods(cohen.d.default)
methods(effsize::cohen.d.default)
methods(effsize::cohen.d.default*)
cohen.d.default*
methods(cohen.d.default*)
pwr::pwr.t.test(n = NULL, d = 0.1, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.3, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.5, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.8, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.1, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.3, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.5, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.8, sig.level = 0.05, power = 0.8, type = "paired")
-0.9893322/2
cor(x0,y0)
abs(mean(x0)-mean(y0))/sqrt(2.838^2 - 2.838^2 - 2*cor(x0,y0)*2.838^2)
effsize::cohen.d(x0,y0,paired = TRUE)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE,pooled=FALSE)
effsize::cohen.d(x0,y0,paired = TRUE,pooled=TRUE)
effsize::cohen.d(x0,y0,paired = TRUE,pooled=FALSE)
effsize::cohen.d(x0,y0,paired = TRUE)
y0
abs(mean(x0)-mean(y0))/sqrt(2.838^2 - (var(y0) * (ny-1)/ny) - 2*cor(x0,y0)*2.838*(sd(y0) * (ny-1)/ny))
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
e1 <- apply(data, 2, sum)/nrow(data)
e2 <- apply(data, 2, sum)/nrow(data)
rbind(e1,e2) # Como as frequências esperadas não são menores $(E_{i j}<5)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected # avalia freq esperadas diretamente pelo teste
chisq.test(data,correct=F) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade de Yates)
library(psych)
psych::phi(data,digits=7)
# ou
library(DescTools)
DescTools::CramerV(data)
pwr.chisq.test(w = 0.3535534, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.30, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.50, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.30, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.50, df = 1, sig.level = 0.05, power = 0.80)
