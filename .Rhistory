library(psych)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
psych::YuleQ(x)
library(psych)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
psych::YuleQ(x)
x
library(psych)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
psych::YuleQ(x)
library(psych)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
YuleQ(x)
library(psych)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
DescTools::YuleQ(x)
library(DescTools)
x11 <- 30
x12 <- 20
x21 <- 25
x22 <- 40
x <- matrix(0,2,2)
x[1,1] <- x11
x[1,2] <- x12
x[2,1] <- x21
x[2,2] <- x22
DescTools::YuleQ(x)
library(effsize)
install.packages("effsize")
library(effsize)
grupo1 <- c(10,10,20,20,20,30,30,30,40,50)
grupo2 <- c(10,20,30,40,40,50)
resultado <- effsize::cliff.delta(grupo1,grupo2,return.dm=T)
print(resultado)
print(resultado$dm)
library(effsize)
grupo1 <- c(10,10,20,20,20,30,30,30,40,50)
grupo2 <- c(10,20,30,40,40,50)
resultado <- effsize::cliff.delta(grupo1,grupo2,return.dm=T)
print(resultado)
print(resultado$dm)
library(effsize)
grupoa=rnorm(100,mean=10)
grupob=rnorm(100,mean=12)
d=(c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
x0 <- runif(5,min=10,max=20)
diff0 <- runif(5,min=-12,max=30)
y0 <- x0+diff0
x <- x0
y <- y0
p <- wilcox.test(x0,y0,paired=T,exact=F,correct=F)$p.value
z <- qnorm(1−(p/2))
x0 <- runif(5,min=10,max=20)
diff0 <- runif(5,min=-12,max=30)
y0 <- x0+diff0
x <- x0
y <- y0
p <- wilcox.test(x0,y0,paired=T,exact=F,correct=F)$p.value
z <- qnorm(1-(p/2))
z1 <- z/sqrt(10)
x0 <- runif(5,min=10,max=20)
diff0 <- runif(5,min=-12,max=30)
y0 <- x0+diff0
x <- x0
y <- y0
p <- wilcox.test(x0,y0,paired=T,exact=F,correct=F)$p.value
z <- qnorm(1-(p/2))
z1 <- z/sqrt(10)
z1
x <- c(11,15,14,17,19,13,15,21,15,12,16,24)
y <- c(3,15,8,13,21,7,0,14,11,4,8,15)
kendall <- cor.test(x,y,method="kendall")
x <- c(11,15,14,17,19,13,15,21,15,12,16,24)
y <- c(3,15,8,13,21,7,0,14,11,4,8,15)
kendall <- cor.test(x,y,method="kendall")
kendall
library(effsize)
# Exemplo para d de cohen grupos independentes:
grupoa=rnorm(100,mean=10)
grupob=rnorm(100,mean=12)
d=(c(grupoa,grupob))
cohen.d(grupoa,grupob)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
-   O coeficiente Phi $\phi$ é uma medida indicada para tabelas de contingência 2 × 2, sendo um caso específico da medida mais generalizada $V$ de Cramér.
-   Pode ser associado ao
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
library(rcompanion)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
rcompanion::cohenW(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
library(DescTools)
DescTools::Phi(data)
library(effsize)
# Exemplo para d de cohen grupos independentes:
grupoa=rnorm(100,mean=10)
grupob=rnorm(100,mean=12)
d=(c(grupoa,grupob))
cohen.d(grupoa,grupob)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
# Exemplo para d de cohen grupos pareados
x0 <- rnorm(5,2,2.838)
diff0 <- rnorm(5,1,2.838)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
f <- rep(c("grupoa","grupob"),each=100)
cohen.d(d,f,hedges.correction=TRUE)
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=25)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat−mediacont)/desviocont)
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=25)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
library(effsize)
# Exemplo para d de cohen grupos independentes:
grupoa=rnorm(100,mean=10)
grupob=rnorm(100,mean=12)
d=(c(grupoa,grupob))
effsize::cohen.d(grupoa,grupob)
effsize::cohen.d
methods(effsize::cohen.d)
effsize::cohen.d.default
effsize::cohen.d.default*
effsize::cohen.d.default()
effsize::cohen.d.default
methods(effsize::cohen.d)
methods(effsize::cohen.d.default)
methods(effsize::cohen.d.default*)
effsize::cohen.d.default
cohen.d.default
effsize::cohen.d.default
align.time.POSIXct*
align.time.POSIXct
effsize:::cohen.d.default
?pwr.t.test
?pwr::pwr.t.test
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
library(DescTools)
DescTools::Phi(data)
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
library(psych)
psych::phi(data,digits=4)
library(magrittr)
data %>% sum()
?MESS::power.mcnemar.test
help(MESS::power.mcnemar.test
N)
help(MESS::power.mcnemar.test)
help(MESS:::power.mcnemar.test)
power_mcnemar_test(n=NULL, paid=.125, psi=2, power=.9)
MESS::power_mcnemar_test(n=NULL, paid=.125, psi=2, power=.9)
power_mcnemar_test(n=60, power=.9)
MESS::power_mcnemar_test(n=60, paid=.125, power=.9)
MESS::power.mcnemar.test
MESS:::power.mcnemar.test
MESS::power.mcnemar.test
MESS::power.mcnemar.test()
methods(MESS::power.mcnemar.test)
methods(power.mcnemar.test)
library(MESS)
power.mcnemar.test
#' pwr.mcnemar(0.05, 0.45, power = 0.8)
#' pwr.mcnemar(0.05, 0.45, n = 22)
pwr.mcnemar <- function(p10, p01, alpha = 0.05, n, power) {
pdisc <- p10 + p01
pdiff <- p10 - p01
if (missing(power) && !missing(n)) {
x1 <- (pdiff * sqrt(n) - qnorm(1 - alpha / 2) * sqrt(pdisc)) /
sqrt(pdisc - pdiff ^ 2)
x2 <- (-pdiff * sqrt(n) - qnorm(1 - alpha / 2) * sqrt(pdisc)) /
sqrt(pdisc - pdiff ^ 2)
power <- pnorm(x1) + pnorm(x2)
} else if (missing(n) && !missing(power)) {
n <- ((qnorm(1 - alpha / 2) * sqrt(pdisc) + qnorm(power) *
sqrt(pdisc - pdiff ^ 2)) / pdiff) ^ 2
} else {
stop("Must supply one of `n` or `power`, but not both.")
}
c("n" = n, "power" = power)
}
pwr.mcnemar(0.05, 0.45, n = 22)
pwr.mcnemar(0.05, 0.45, n = 60)
MESS::power.mcnemar.test(n = 60, paid = NULL, psi = NULL, sig.level = 0.05, power = NULL, alternative = c("two.sided", "one.sided"), method = c("normal", "exact"))
# phi = 0. 1 0 5 4
A  <- 0
B  <- 4
C  <- 5
D  <- 1
n <- A+B+C+D
n
x <- matrix (0,2,2)
x [ 1 , 1 ] <- A
x [ 1 , 2 ] <- B
x [ 2 , 1 ] <- C
x [ 2 , 2 ] <- D
x
phi <-  ( (B-C) ^ 2 / (B+C) /n ) ^ 0.5
phi
MESS::power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
library(MESS)
power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
MESS::power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8)
MESS:::power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
MESS::power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
install.packages("MESS")
install.packages("MESS")
install.packages("MESS")
install.packages("MESS")
install.packages("MESS")
library(MESS)
MESS:::power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
MESS::power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
library(MESS)
MESS::power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
power.mcnemar.test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
library(MESS)
power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
library(MESS)
MESS::power.mcnemar.test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
MESS::power_mcnemar_test(n=NULL, paid=.1, psi=2, power=.8, method="normal")
MESS:::power_mcnemar_test(n=NULL, paid=.25, psi=.125, alpha=0.05,power=.8)
MESS:::power_mcnemar_test(n=NULL, paid=.25, psi=.125, power=.8)
biostatUZH::sampleSizeMcNemar(p1, p2, alpha = 0.05, power = 0.8)
install.packages("biostatUZH")
install.packages("biostatUZH")
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
mcnemar.test(Performance)
# McNemar's Test # (com correção de continuidade)
n1 = 150         # number of cases switched from + to -
n2 = 86        # number of cases switched from - to +
#program starts
chiSq = (abs(n1 - n2) - 1)^2 / (n1 + n2)  # McNemar's Chi Sq
chiSq
p = pchisq(chiSq, df=1)
p
# Program 2: Sample size for McNemar's test
# parameters
alpha = 0.05   # Type I Error
power = 0.8    # 1 - beta
tail = 2       # 2 tail model
p1 = 0.25      # expected proportion that switches from + to -
p2 = 0.125     # expected proportion that switches from - to +
# program starts
zb = qnorm(power)
za = qnorm(1 - alpha / tail)
pie = p1 + p2
theta = p1 / p2
if(theta<1) theta = 1.0 / theta
tp = theta +  1;
tm = theta - 1;
top = za*tp + zb*sqrt(tp*tp-tm*tm*pie)
top = top * top
bot = tm * tm * pie
ssiz = ceiling(top / bot);
ssiz # number of pairs
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
mcnemar.test(Performance)
# McNemar's Test # (com correção de continuidade)
n1 = 150         # number of cases switched from + to -
n2 = 86        # number of cases switched from - to +
#program starts
chiSq = (abs(n1 - n2) - 1)^2 / (n1 + n2)  # McNemar's Chi Sq
chiSq
p = pchisq(chiSq, df=1)
p
Performance
Performance[1,]
# Program 2: Sample size for McNemar's test
# parameters
alpha = 0.05   # Type I Error
power = 0.8    # 1 - beta
tail = 2       # 2 tail model
p1 = n1/sum(Performance[1,])      # expected proportion that switches from + to -
p2 = n2/sum(Performance[2,])    # expected proportion that switches from - to +
# program starts
zb = qnorm(power)
za = qnorm(1 - alpha / tail)
pie = p1 + p2
theta = p1 / p2
if(theta<1) theta = 1.0 / theta
tp = theta +  1;
tm = theta - 1;
top = za*tp + zb*sqrt(tp*tp-tm*tm*pie)
top = top * top
bot = tm * tm * pie
ssiz = ceiling(top / bot);
ssiz # number of pairs
sum(Performance)
# Program 2: Sample size for McNemar's test
# parameters
alpha = 0.05   # Type I Error
power = 0.8    # 1 - beta
tail = 2       # 2 tail model
p1 = n1/sum(Performance[1,])      # expected proportion that switches from + to -
p2 = n2/sum(Performance[2,])    # expected proportion that switches from - to +
# program starts
zb = qnorm(power)
za = qnorm(1 - alpha / tail)
pie = p1 + p2
theta = p1 / p2
if(theta<1) theta = 1.0 / theta
tp = theta +  1;
tm = theta - 1;
top = za*tp + zb*sqrt(tp*tp-tm*tm*pie)
top = top * top
bot = tm * tm * pie
ssiz = ceiling(top / bot);
ssiz # number of pairs
sum(Performance)
biostatUZH::sampleSizeMcNemar(p1, p2, alpha = 0.05, power = 0.8)
MESS:::power_mcnemar_test(n=NULL, paid=.25, psi=.125, power=.8)
MESS:::power_mcnemar_test(n=NULL, paid=p1, psi=p2, power=.8)
p1
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
mcnemar.test(Performance)
apply(Performance,1,sum)
apply(Performance,1,sum)[1]
sum(Performance[1,])
Performance[1,]/sum(Performance[1,])
Performance[2,]/sum(Performance[2,])
rbind(Performance[1,]/sum(Performance[1,]),
Performance[2,]/sum(Performance[2,]))
mcnemar.test(Performance)
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
Performance %>% sum()
library(magrittr)
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
Performance %>% sum()
mcnemar.test(Performance)
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
Performance %>% sum()
mcnemar.test(Performance)
?ES.h
ES.h
pwr::ES.h
?pwr::ES.h
library(DescTools)
library(rcompanion)
library(psych)
#phi=0.1021
x11 <-1
x12 <-1
x21 <-5
x22 <-3
n <-x11+x12+x21+x22
n
x <-matrix(0,2,2)
x[1,1] <-x11
x[1,2] <-x12
x[2,1] <-x21
x[2,2] <-x22
x
cohenW(x)
p <-chisq.test(x)$p.value
p
for(iin2:100){
library(DescTools)
library(rcompanion)
library(psych)
#phi=0.1021
x11 <-1
x12 <-1
x21 <-5
x22 <-3
n <-x11+x12+x21+x22
n
x <-matrix(0,2,2)
x[1,1] <-x11
x[1,2] <-x12
x[2,1] <-x21
x[2,2] <-x22
x
cohenW(x)
p <-chisq.test(x)$p.value
p
for(i in 2:100){
x[1,1] <-x[1,1]+x11
x[1,2] <-x[1,2]+x12
x[2,1] <-x[2,1]+x21
x[2,2] <-x[2,2]+x22
p[i] <-chisq.test(x)$p.value
n[i] <-10*i
}
x11()
plot(n,p,type=”l”,ylim=c(0,1),xlim=c(0,650),col="red")
x11()
x11()
x11()
x11()
x11()
plot(n,p,type="l",ylim=c(0,1),xlim=c(0,650),col="red")
cbind(n,round(p,5))
p
cohenW(x)
