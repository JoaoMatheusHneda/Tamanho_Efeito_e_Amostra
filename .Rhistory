nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE)
effsize::cohen.d
methods(effsize::cohen.d)
cohen.d.default
effsize::cohen.d.default
effsize::cohen.d.default*
cohen.d.ci
ohen.d.by
cohen.d.by
cohen.d.formula
cohen.d.default
effsize::cohen.d.default
effsize::cohen.d.default*
methods(cohen.d.default)
methods(effsize::cohen.d.default)
methods(effsize::cohen.d.default*)
cohen.d.default*
methods(cohen.d.default*)
pwr::pwr.t.test(n = NULL, d = 0.1, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.3, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.5, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.8, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr::pwr.t.test(n = NULL, d = 0.1, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.3, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.5, sig.level = 0.05, power = 0.8, type = "paired")
pwr::pwr.t.test(n = NULL, d = 0.8, sig.level = 0.05, power = 0.8, type = "paired")
-0.9893322/2
cor(x0,y0)
abs(mean(x0)-mean(y0))/sqrt(2.838^2 - 2.838^2 - 2*cor(x0,y0)*2.838^2)
effsize::cohen.d(x0,y0,paired = TRUE)
y0 <- x0+diff0
n <- 5
nx <- length(x0)
ny <- length(y0)
t <- t.test(x0,y0,paired=T)$statistic
cohen <- t/sqrt(n)
cohen
effsize::cohen.d(x0,y0,paired = TRUE,pooled=FALSE)
effsize::cohen.d(x0,y0,paired = TRUE,pooled=TRUE)
effsize::cohen.d(x0,y0,paired = TRUE,pooled=FALSE)
effsize::cohen.d(x0,y0,paired = TRUE)
y0
abs(mean(x0)-mean(y0))/sqrt(2.838^2 - (var(y0) * (ny-1)/ny) - 2*cor(x0,y0)*2.838*(sd(y0) * (ny-1)/ny))
data <- matrix(c(25,5,15,15),ncol=2,byrow=T)
data
e1 <- apply(data, 2, sum)/nrow(data)
e2 <- apply(data, 2, sum)/nrow(data)
rbind(e1,e2) # Como as frequências esperadas não são menores $(E_{i j}<5)$, a correção de continuidade de Yates não foi utilizada.
chisq.test(data,correct=F)$expected # avalia freq esperadas diretamente pelo teste
chisq.test(data,correct=F) #(sem correção de continuidade)
as.numeric(sqrt(chisq.test(data,correct=F)$statistic/sum(data))) #(sem correção de continuidade de Yates)
library(psych)
psych::phi(data,digits=7)
# ou
library(DescTools)
DescTools::CramerV(data)
pwr.chisq.test(w = 0.3535534, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.30, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.50, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.10, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.30, df = 1, sig.level = 0.05, power = 0.80)
pwr.chisq.test(w = 0.50, df = 1, sig.level = 0.05, power = 0.80)
knitr::include_graphics(path="imagens/P-valor.gif")
effsize::cohen.d(x0,y0,paired = TRUE)
eta.sq <- function(mod,k=NULL){
atab = anova(mod)
if(is.null(k)){ k = 1:(nrow(atab)-1) }
sum(atab[k,2]) / sum(atab[,2])
}
cor(mtcars$mpg, mtcars$wt, method="pearson")
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
install.packages("ggscatter")
ggpubr::ggscatter(mtcars, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
ggplot2::ggplot(data=mtcars,ggplot2::aes(x=mpg, y=wt)) + ggplot2::geom_point()
ggplot2::ggplot(data=mtcars,ggplot2::aes(x=mpg, y=wt)) +
ggplot2::geom_point() +
geom_smooth(method = "lm")
ggplot2::ggplot(data=mtcars,ggplot2::aes(x=mpg, y=wt)) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
faithful
summary(eruption.lm)$r.squared
eruption.lm <-  lm(eruptions ~ waiting, data=faithful)
summary(eruption.lm)$r.squared
eta.sqeruption.lm)
eta.sq(eruption.lm)
eta.sq <- function(mod,k=NULL){
atab = anova(mod)
if(is.null(k)){ k = 1:(nrow(atab)-1) }
sum(atab[k,2]) / sum(atab[,2])
}
eta.sq(eruption.lm)
omega.sq <- function(mod){
atab = anova(mod)
ssb = atab[["Sum Sq"]][1]
ssw = atab[["Sum Sq"]][2]
dfb = atab[["Df"]][1]
msw = atab[["Mean Sq"]][2]
(ssb - dfb*msw) / (ssb + ssw + msw)
}
eruption.lm
omega.sq <- function(mod){
atab = anova(mod)
ssb = atab[["Sum Sq"]][1]
ssw = atab[["Sum Sq"]][2]
dfb = atab[["Df"]][1]
msw = atab[["Mean Sq"]][2]
(ssb - dfb*msw) / (ssb + ssw + msw)
}
omega.sq(eruption.lm)
eruption.lm <-  aov(eruptions ~ waiting, data=faithful)
summary(eruption.lm)$r.squared
eruption.lm <-  aov(lm(eruptions ~ waiting, data=faithful))
summary(eruption.lm)$r.squared
eruption.lm <-  aov(eruptions ~ waiting, data=faithful)
summary(eruption.lm)$r.squared
aov(eruptions ~ waiting, data=faithful)
eruption.lm <-  lm(eruptions ~ waiting, data=faithful)
summary(eruption.lm)$r.squared
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=30)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=34)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=33)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=34)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=36)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=34)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=35)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
tratamento <- rnorm(50,mean=35)
controle <- rnorm(50,mean=34)
desviotrat <- sqrt(var(tratamento))
desviocont <- sqrt(var(controle))
mediatrat <- mean(tratamento)
mediacont <- mean(controle)
delta <- ((mediatrat-mediacont)/desviocont)
delta
summary(eruption.lm)
# Balanced ANOVAs
eruption.lm <-  lm(eruptions ~ waiting, data=faithful)
summary(eruption.lm)
summary(eruption.lm)$r.squared
# Balanced ANOVAs
eruption.lm <-  lm(eruptions ~ waiting, data=faithful)
summary(eruption.lm)
summary(eruption.lm)$r.squared
rstatix::eta_squared()
rstatix::eta_squared(eruption.lm)
install.packages("effectsize")
rstatix::eta_squared(eruption.lm)
effectsize::eta_squared(eruption.lm)
omega.sq <- function(mod){
atab = anova(mod)
ssb = atab[["Sum Sq"]][1]
ssw = atab[["Sum Sq"]][2]
dfb = atab[["Df"]][1]
msw = atab[["Mean Sq"]][2]
(ssb - dfb*msw) / (ssb + ssw + msw)
}
omega.sq(eruption.lm)
effectsize::omega_squared(eruption.lm)
omega.sq(eruption.lm)
omega.sq <- function(mod){
atab = anova(mod)
ssb = atab[["Sum Sq"]][1]
ssw = atab[["Sum Sq"]][2]
dfb = atab[["Df"]][1]
msw = atab[["Mean Sq"]][2]
(ssb - dfb*msw) / (ssb + ssw + msw)
}
omega.sq(eruption.lm)
rstatix::omega_squared(eruption.lm)
omega.sq(eruption.lm)
effectsize::omega_squared(eruption.lm)
effectsize::omega_squared(eruption.lm) %>% str()
library(magrittr)
effectsize::omega_squared(eruption.lm) %>% str()
effectsize::omega_squared(eruption.lm)$Omega2
effectsize::omega_squared(eruption.lm)$Omega2
effectsize::omega_squared(eruption.lm)
omega.sq <- function(mod){
atab = anova(mod)
ssb = atab[["Sum Sq"]][1]
ssw = atab[["Sum Sq"]][2]
dfb = atab[["Df"]][1]
msw = atab[["Mean Sq"]][2]
(ssb - dfb*msw) / (ssb + ssw + msw)
}
omega.sq(eruption.lm)
effectsize::omega_squared(eruption.lm)
effectsize::omega_squared(eruption.lm)$Omega2
effectsize::eta_squared(eruption.lm)$Eta2
rstatix::eta_squared(eruption.lm)
effectsize::eta_squared(eruption.lm)
effectsize::eta_squared(eruption.lm)$Eta2
effectsize::cohens_f(eruption.lm)
effectsize::cohens_f(eruption.lm) %>% str()
effectsize::cohens_f(eruption.lm)
effectsize::cohens_f(eruption.lm)$Cohens_f
summary(eruption.lm)
anova(summary(eruption.lm))
aov(summary(eruption.lm))
anova(eruption.lm)
anova(eruption.lm) %>% str()
anova(eruption.lm)$'Sum Sq'
anova(eruption.lm)$'Sum Sq'[1]
anova(eruption.lm)$'Sum Sq'[1]/sum(anova(eruption.lm)$'Sum Sq')
marketing
data("marketing", package = "datarium")
install.packages("datarium")
data("marketing", package = "datarium")
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
summary(model)
effectsize::eta_squared(model)$Eta2
0.4723673+0.1987273
anova(model)
effectsize::eta_squared(model)
effectsize::eta_squared(model, partial=FALSE)
effectsize::eta_squared(model, partial=FALSE)
effectsize::eta_squared(model, partial=TRUE)
effectsize::eta_squared(model, partial=FALSE)
effectsize::eta_squared(model, generalized=TRUE)
effectsize::eta_squared(model)
data("marketing", package = "datarium")
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
effectsize::eta_squared(model, partial=TRUE)
effectsize::eta_squared(model)
data("marketing", package = "datarium")
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
effectsize::eta_squared(model)
effectsize::omega_squared(model)
effectsize::cohens_f(model)
effectsize::cohens_f(model)$Cohens_f
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Compute ANOVA
res.aov <- aov(len ~ supp*dose, data = df)
summary(res.aov)
lm(len ~ supp*dose, data = df)
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Compute ANOVA
res.aov <- aov(len ~ supp*dose, data = df)
summary(res.aov)
summary(lm(len ~ supp*dose, data = df))
summary(res.aov)
anova(lm(len ~ supp*dose, data = df))
df <- ToothGrowth
df$dose <- as.factor(df$dose)
# Compute ANOVA
res.aov <- aov(len ~ supp*dose, data = df)
summary(res.aov)
anova(lm(len ~ supp*dose, data = df))
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
library(effsize)
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d <- (c(grupoa,grupob))
effsize::VD.A(grupoa,grupob)
# Balanced ANOVAs
eruption.lm <-  lm(eruptions ~ waiting, data=faithful)
summary(eruption.lm)$r.squared
eruption.lm
summary(eruption.lm)
aov(eruptions ~ waiting, data=faithful)
summary(eruption.lm)
aov(eruptions ~ waiting, data=faithful)
aov(eruptions ~ waiting, data=faithful)
anova(eruption.lm)
aov(eruptions ~ waiting, data=faithful)
"------------"
anova(eruption.lm)
LRcat(p0=.137,p1=.611,prop =.689,power=.95)
pwr2ppl::LRcat(p0=.137,p1=.611,prop =.689,power=.95)
install.packages("pwr2ppl")
pwr2ppl::LRcat(p0=.137,p1=.611,prop =.689,power=.95)
faithful
?effsize::cohen.d
library(effsize)
# Exemplo para d de cohen grupos independentes:
# Para esse exemplo,
# Tamanho das amostras do grupoa e grupo b são suficientemente grandes (>= 30)
# Dados são provenientes de normais
# Suposição de que variâncias populacionais não são conhecidas,
#   mas são iguais
grupoa <- rnorm(100,mean=10)
grupob <- rnorm(100,mean=12)
d=(c(grupoa,grupob))
effsize::cohen.d(grupoa,grupob)
library(magrittr)
grupoa_grupob_format <- data.frame(grupoa,grupob) %>%
tidyr::pivot_longer(grupoa:grupob, names_to = "grupo",
values_to = "valor")
rstatix::cohens_d(data=grupoa_grupob_format,
formula=valor~grupo,
var.equal = TRUE)
lsr::cohensD(formula = valor~grupo,
data = grupoa_grupob_format,
method = "pooled"
)
# Para esse exemplo,
# Tamanho das amostras do grupoa e grupo b são suficientemente grandes (>= 30)
# Dados são provenientes de normais
# Suposição de que variâncias populacionais não são conhecidas,
#   mas são diferentes
grupoa <- rnorm(100,mean=10,sd = 5)
grupob <- rnorm(100,mean=12,sd = 3)
d=(c(grupoa,grupob))
effsize::cohen.d(grupoa,grupob)
grupoa_grupob_format <- data.frame(grupoa,grupob) %>%
tidyr::pivot_longer(grupoa:grupob, names_to = "grupo",
values_to = "valor")
rstatix::cohens_d(data=grupoa_grupob_format,
formula=valor~grupo,
var.equal = FALSE)
lsr::cohensD(formula = valor~grupo,
data = grupoa_grupob_format,
method = "unequal"
) # That is, the value of d returned by the function is always positive or zero.
library(effsize)
grupoa <- rnorm(15,mean=10)
grupob <- rnorm(15,mean=12)
d <- (c(grupoa,grupob))
f <- rep(c("grupoa","grupob"),each=15)
effsize::cohen.d(d,f,hedges.correction=TRUE)
